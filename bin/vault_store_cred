#!/bin/bash
#
# Obtain and store condor credentials for each oath_service listed in

ME="${0##*/}"

usage()
{
    echo "Usage: $ME [-vd] oauth_service ..."
    echo "  -v shows more progress than normal" 
    echo "  -d shows a lot of debug information" 
    echo "  Each oauth_service is an issuer optionally followed by hyphen and role"
    exit 1
} >&2

fatal()
{
    echo "$ME: $@"
    exit 1
} >&2

verbose()
{
    if [ -n "$VERBOSE" ]; then
	echo "$@" >&2
    fi
}

VERBOSE=
while getopts "dv" opt; do
    case ${opt} in
	d) VERBOSE="-d";;
	v) VERBOSE="-v";;
	\?) usage;;
    esac
done
shift $((OPTIND -1))

if [ "$#" = 0 ]; then
    usage
fi

CONDOROPTS="$(condor_config_val SEC_CREDENTIAL_GETTOKEN_OPTS 2>/dev/null)"
if [ -z "$CONDOROPTS" ] && [ -z "$HTGETTOKENOPTS" ]; then
    fatal 'Neither SEC_CREDENTIAL_GETTOKEN_OPTS condor value nor $HTGETTOKENS environment set'
fi

# Keep the standard duration vault token in $VTOKEN.$SERVICE to make
#  sure that credmon has a long-duration one, but copy it to $VTOKEN if a
#  new one is generated.
ID="`id -u`"
VTOKEN="/tmp/vt_u$ID"
BOTKEN=""
if [ -z "$BEARER_TOKEN_FILE" ]; then
    # Also store the bearer token with a .$SERVICE extension
    BTOKEN="${XDG_RUNTIME_DIR:-/tmp}/bt_u$ID"
fi

NL="
"

for SERVICE; do 
    SHOWSTORING=false
    if [ -n "$VERBOSE" ]; then
	SHOWSTORING=true
    fi
    ISSUER="${SERVICE%-*}"
    OPTS="$CONDOROPTS -i $ISSUER"
    if [ "$SERVICE" != "$ISSUER" ]; then
	ROLE="${SERVICE#*-}"
	OPTS="$OPTS -r $ROLE"
	if [ "$SERVICE" != "$ISSUER-$ROLE" ]; then
	    fatal "Only one hyphen allowed in use_oauth_services name"
	fi
    fi
    if [ -n "$BTOKEN" ]; then
	OPTS="-o $BTOKEN.$SERVICE $OPTS"
    fi
    OPTS="--vaulttokenttl=28d $OPTS --vaulttokeninfile=$VTOKEN.$SERVICE --vaulttokenfile=/dev/stdout --showbearerurl"
    verbose "Attempting to get tokens for $SERVICE"
    # First attempt to get tokens quietly without oidc
    CRED="`htgettoken $OPTS --nooidc ${VERBOSE:--q}`"
    if [ $? != 0 ]; then
	# OIDC authentication probably needed, so remove -q to tell the user
	#  what is happening
	SHOWSTORING=true
	echo "Authentication needed for $SERVICE" >&2
	CRED="`htgettoken $OPTS $VERBOSE`"
	if [ $? != 0 ]; then
	    fatal "htgettoken failed"
	fi
    fi

    if [ -n "$BTOKEN" ] && [ -f $BTOKEN.$SERVICE ]; then
	verbose "Copying bearer token to $BTOKEN"
	# Copy bearer token to $BTOKEN atomically
	TMPFILE="`mktemp $BTOKEN.XXXXXXXXXX`"
	cat $BTOKEN.$SERVICE >$TMPFILE
	mv $TMPFILE $BTOKEN
    fi

    if ! [[ "$CRED" =~ ^s\..* ]]; then
	# No new vault token was generated
	continue
    fi 

    # A new long-duration vault token was received, followed by bearer URL
    # Exchange vault token for a shorter duration vault token on disk
    # Normally do this quietly
    echo ${CRED%$NL*}|htgettoken $CONDOROPTS --nobearertoken --vaulttokeninfile=/dev/stdin --vaulttokenfile=$VTOKEN.$SERVICE ${VERBOSE:--q} >&2
    if [ $? != 0 ]; then
	fatal "Failed to exchange vault token"
    fi

    verbose "Copying vault token to $VTOKEN"
    TMPFILE="`mktemp $VTOKEN.XXXXXXXXXX`"
    cat $VTOKEN.$SERVICE >$TMPFILE
    mv $TMPFILE $VTOKEN

    if $SHOWSTORING; then
	echo "Storing condor credentials for $SERVICE" >&2
    fi
    echo "$CRED"|(
        # convert the two lines to json
        read TOK
        read URL
        echo "{"
        echo "  \"vault_token\": \"$TOK\","
        echo "  \"vault_url\": \"$URL\""
        echo "}"
        )|condor_store_cred add-oauth -s "$SERVICE" -i - >/dev/null
    if [ $? != 0 ]; then
	fatal "Failed to store condor credentials for $SERVICE"
    fi
done
